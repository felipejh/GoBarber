{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport history from \"../../../services/history\";\nimport api from \"../../../services/api\";\nimport { signInSuccess } from './actions';\nexport function* signIn({\n  payload\n}) {\n  const {\n    email,\n    password\n  } = payload;\n  const response = yield call(api.post, 'sessions', {\n    email,\n    password\n  });\n  const {\n    token,\n    user\n  } = response.data;\n\n  if (!user.provider) {\n    console.tron.error('Usuário não é prstador');\n    return;\n  }\n\n  yield put(signInSuccess(token, user));\n  history.push('/dashboard');\n}\nexport default all([takeLatest('@auth/SIGN_IN_REQUEST', signIn)]);","map":{"version":3,"sources":["/Users/felipehoffmann/desenv/workspaces/workspace_gostack/modulo09/src/store/modules/auth/sagas.js"],"names":["takeLatest","call","put","all","history","api","signInSuccess","signIn","payload","email","password","response","post","token","user","data","provider","console","tron","error","push"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,SAASC,aAAT,QAA8B,WAA9B;AAEA,OAAO,UAAUC,MAAV,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA8B;AACnC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBF,OAA5B;AAEA,QAAMG,QAAQ,GAAG,MAAMV,IAAI,CAACI,GAAG,CAACO,IAAL,EAAW,UAAX,EAAuB;AAChDH,IAAAA,KADgD;AAEhDC,IAAAA;AAFgD,GAAvB,CAA3B;AAKA,QAAM;AAAEG,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAkBH,QAAQ,CAACI,IAAjC;;AAEA,MAAI,CAACD,IAAI,CAACE,QAAV,EAAoB;AAClBC,IAAAA,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmB,wBAAnB;AACA;AACD;;AAED,QAAMjB,GAAG,CAACI,aAAa,CAACO,KAAD,EAAQC,IAAR,CAAd,CAAT;AACAV,EAAAA,OAAO,CAACgB,IAAR,CAAa,YAAb;AACD;AAED,eAAejB,GAAG,CAAC,CAACH,UAAU,CAAC,uBAAD,EAA0BO,MAA1B,CAAX,CAAD,CAAlB","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\n\nimport history from '~/services/history';\nimport api from '~/services/api';\n\nimport { signInSuccess } from './actions';\n\nexport function* signIn({ payload }) {\n  const { email, password } = payload;\n\n  const response = yield call(api.post, 'sessions', {\n    email,\n    password,\n  });\n\n  const { token, user } = response.data;\n\n  if (!user.provider) {\n    console.tron.error('Usuário não é prstador');\n    return;\n  }\n\n  yield put(signInSuccess(token, user));\n  history.push('/dashboard');\n}\n\nexport default all([takeLatest('@auth/SIGN_IN_REQUEST', signIn)]);\n"]},"metadata":{},"sourceType":"module"}