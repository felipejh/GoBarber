{"ast":null,"code":"var _jsxFileName = \"/Users/felipehoffmann/desenv/workspaces/workspace_gostack/modulo09/src/pages/Dashboard/index.js\";\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { format, subDays, addDays, setHours, setMinutes, setSeconds, isBefore, isEqual, parseISO, startOfHour } from 'date-fns';\nimport pt from 'date-fns/locale/pt';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md';\nimport api from \"../../services/api\";\nimport { Container, Time } from './styles';\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nexport default function Dashboard() {\n  const [schedule, setSchedule] = useState([]);\n  const [date, setDate] = useState(new Date());\n  const dateFormatted = useMemo(() => format(date, \"d 'de' MMMM\", {\n    locale: pt\n  }), [date]);\n  useEffect(() => {\n    async function loadSchedule() {\n      const response = await api.get('schedule', {\n        params: {\n          date\n        }\n      });\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      const data = range.map(hour => {\n        const checkDate = startOfHour(setSeconds(setMinutes(setHours(date, hour), 0), 0));\n        const compareDate = utcToZonedTime(checkDate, timezone);\n        return {\n          time: `${hour}:00h`,\n          past: isBefore(compareDate, new Date()),\n          // appointment: response.data.find(a => {\n          //   isEqual(parseISO(a.date), compareDate);\n          // console.tron.log('------------');\n          // console.tron.log(parseISO(a.date));\n          // console.tron.log(compareDate);\n          // console.tron.log(isEqual(parseISO(a.date), compareDate));\n          // }),\n          appointment: true\n        };\n      });\n      console.tron.log(data);\n      setSchedule(data);\n    }\n\n    loadSchedule();\n  }, [date]);\n\n  function handlePrevDay() {\n    setDate(subDays(date, 1));\n  }\n\n  function handleNextDay() {\n    setDate(addDays(date, 1));\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handlePrevDay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(MdChevronLeft, {\n    size: 36,\n    color: \"#fff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  })), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, dateFormatted), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handleNextDay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(MdChevronRight, {\n    size: 36,\n    color: \"#fff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }))), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, schedule.map(time => React.createElement(Time, {\n    key: time.time,\n    past: time.past,\n    available: !time.appointment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, time.time), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, time.appointment ? time.appointment.user.name : 'Em aberto')))));\n}","map":{"version":3,"sources":["/Users/felipehoffmann/desenv/workspaces/workspace_gostack/modulo09/src/pages/Dashboard/index.js"],"names":["React","useState","useMemo","useEffect","format","subDays","addDays","setHours","setMinutes","setSeconds","isBefore","isEqual","parseISO","startOfHour","pt","utcToZonedTime","MdChevronLeft","MdChevronRight","api","Container","Time","range","Dashboard","schedule","setSchedule","date","setDate","Date","dateFormatted","locale","loadSchedule","response","get","params","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","data","map","hour","checkDate","compareDate","time","past","appointment","console","tron","log","handlePrevDay","handleNextDay","user","name"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\nimport {\n  format,\n  subDays,\n  addDays,\n  setHours,\n  setMinutes,\n  setSeconds,\n  isBefore,\n  isEqual,\n  parseISO,\n  startOfHour,\n} from 'date-fns';\nimport pt from 'date-fns/locale/pt';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md';\nimport api from '~/services/api';\n\nimport { Container, Time } from './styles';\n\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\nexport default function Dashboard() {\n  const [schedule, setSchedule] = useState([]);\n  const [date, setDate] = useState(new Date());\n\n  const dateFormatted = useMemo(\n    () => format(date, \"d 'de' MMMM\", { locale: pt }),\n    [date]\n  );\n\n  useEffect(() => {\n    async function loadSchedule() {\n      const response = await api.get('schedule', {\n        params: { date },\n      });\n\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n      const data = range.map(hour => {\n        const checkDate = startOfHour(\n          setSeconds(setMinutes(setHours(date, hour), 0), 0)\n        );\n        const compareDate = utcToZonedTime(checkDate, timezone);\n\n        return {\n          time: `${hour}:00h`,\n          past: isBefore(compareDate, new Date()),\n          // appointment: response.data.find(a => {\n          //   isEqual(parseISO(a.date), compareDate);\n          // console.tron.log('------------');\n          // console.tron.log(parseISO(a.date));\n          // console.tron.log(compareDate);\n          // console.tron.log(isEqual(parseISO(a.date), compareDate));\n          // }),\n          appointment: true,\n        };\n      });\n\n      console.tron.log(data);\n      setSchedule(data);\n    }\n\n    loadSchedule();\n  }, [date]);\n\n  function handlePrevDay() {\n    setDate(subDays(date, 1));\n  }\n\n  function handleNextDay() {\n    setDate(addDays(date, 1));\n  }\n\n  return (\n    <Container>\n      <header>\n        <button type=\"button\" onClick={handlePrevDay}>\n          <MdChevronLeft size={36} color=\"#fff\" />\n        </button>\n        <strong>{dateFormatted}</strong>\n        <button type=\"button\" onClick={handleNextDay}>\n          <MdChevronRight size={36} color=\"#fff\" />\n        </button>\n      </header>\n\n      <ul>\n        {schedule.map(time => (\n          <Time key={time.time} past={time.past} available={!time.appointment}>\n            <strong>{time.time}</strong>\n            <span>\n              {time.appointment ? time.appointment.user.name : 'Em aberto'}\n            </span>\n          </Time>\n        ))}\n      </ul>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}