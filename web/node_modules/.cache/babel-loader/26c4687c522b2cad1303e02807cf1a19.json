{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport history from \"../../../services/history\";\nimport api from \"../../../services/api\";\nimport { signInSuccess, signFailure } from './actions';\nexport function* signIn({\n  payload\n}) {\n  try {\n    const {\n      email,\n      password\n    } = payload;\n    const response = yield call(api.post, 'sessions', {\n      email,\n      password\n    });\n    const {\n      token,\n      user\n    } = response.data;\n\n    if (!user.provider) {\n      toast.error('Usuário não é prestador');\n      return;\n    }\n\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n    yield put(signInSuccess(token, user));\n    history.push('/dashboard');\n  } catch (err) {\n    toast.error('Falha na autenticação. Verifique seus dados.');\n    console.tron.error(err);\n    yield put(signFailure());\n  }\n}\nexport function* signUp({\n  payload\n}) {\n  const {\n    name,\n    email,\n    password\n  } = payload;\n\n  try {\n    yield call(api.post, 'users', {\n      name,\n      email,\n      password,\n      provider: true\n    });\n    history.push('/');\n  } catch (err) {\n    toast.error('Falha no cadastro. Verifique seus dados.');\n    yield put(signFailure());\n  }\n}\nexport function setToken({\n  payload\n}) {\n  if (!payload) return;\n  const {\n    token\n  } = payload.auth;\n\n  if (token) {\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n}\nexport function signOut() {\n  history.push('/');\n}\nexport default all([takeLatest('persist/REHYDRATE', setToken), takeLatest('@auth/SIGN_IN_REQUEST', signIn), takeLatest('@auth/SIGN_UP_REQUEST', signUp), takeLatest('@auth/SIGN_OUT', signOut)]);","map":{"version":3,"sources":["/Users/felipehoffmann/desenv/workspaces/workspace_gostack/modulo09/src/store/modules/auth/sagas.js"],"names":["takeLatest","call","put","all","toast","history","api","signInSuccess","signFailure","signIn","payload","email","password","response","post","token","user","data","provider","error","defaults","headers","Authorization","push","err","console","tron","signUp","name","setToken","auth","signOut"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,WAA3C;AAEA,OAAO,UAAUC,MAAV,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA8B;AACnC,MAAI;AACF,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBF,OAA5B;AAEA,UAAMG,QAAQ,GAAG,MAAMZ,IAAI,CAACK,GAAG,CAACQ,IAAL,EAAW,UAAX,EAAuB;AAChDH,MAAAA,KADgD;AAEhDC,MAAAA;AAFgD,KAAvB,CAA3B;AAKA,UAAM;AAAEG,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBH,QAAQ,CAACI,IAAjC;;AAEA,QAAI,CAACD,IAAI,CAACE,QAAV,EAAoB;AAClBd,MAAAA,KAAK,CAACe,KAAN,CAAY,yBAAZ;AACA;AACD;;AAEDb,IAAAA,GAAG,CAACc,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,GAAsC,UAASP,KAAM,EAArD;AAEA,UAAMb,GAAG,CAACK,aAAa,CAACQ,KAAD,EAAQC,IAAR,CAAd,CAAT;AACAX,IAAAA,OAAO,CAACkB,IAAR,CAAa,YAAb;AACD,GAnBD,CAmBE,OAAOC,GAAP,EAAY;AACZpB,IAAAA,KAAK,CAACe,KAAN,CAAY,8CAAZ;AACAM,IAAAA,OAAO,CAACC,IAAR,CAAaP,KAAb,CAAmBK,GAAnB;AACA,UAAMtB,GAAG,CAACM,WAAW,EAAZ,CAAT;AACD;AACF;AAED,OAAO,UAAUmB,MAAV,CAAiB;AAAEjB,EAAAA;AAAF,CAAjB,EAA8B;AACnC,QAAM;AAAEkB,IAAAA,IAAF;AAAQjB,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA4BF,OAAlC;;AAEA,MAAI;AACF,UAAMT,IAAI,CAACK,GAAG,CAACQ,IAAL,EAAW,OAAX,EAAoB;AAC5Bc,MAAAA,IAD4B;AAE5BjB,MAAAA,KAF4B;AAG5BC,MAAAA,QAH4B;AAI5BM,MAAAA,QAAQ,EAAE;AAJkB,KAApB,CAAV;AAOAb,IAAAA,OAAO,CAACkB,IAAR,CAAa,GAAb;AACD,GATD,CASE,OAAOC,GAAP,EAAY;AACZpB,IAAAA,KAAK,CAACe,KAAN,CAAY,0CAAZ;AAEA,UAAMjB,GAAG,CAACM,WAAW,EAAZ,CAAT;AACD;AACF;AAED,OAAO,SAASqB,QAAT,CAAkB;AAAEnB,EAAAA;AAAF,CAAlB,EAA+B;AACpC,MAAI,CAACA,OAAL,EAAc;AAEd,QAAM;AAAEK,IAAAA;AAAF,MAAYL,OAAO,CAACoB,IAA1B;;AAEA,MAAIf,KAAJ,EAAW;AACTT,IAAAA,GAAG,CAACc,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,GAAsC,UAASP,KAAM,EAArD;AACD;AACF;AAED,OAAO,SAASgB,OAAT,GAAmB;AACxB1B,EAAAA,OAAO,CAACkB,IAAR,CAAa,GAAb;AACD;AAED,eAAepB,GAAG,CAAC,CACjBH,UAAU,CAAC,mBAAD,EAAsB6B,QAAtB,CADO,EAEjB7B,UAAU,CAAC,uBAAD,EAA0BS,MAA1B,CAFO,EAGjBT,UAAU,CAAC,uBAAD,EAA0B2B,MAA1B,CAHO,EAIjB3B,UAAU,CAAC,gBAAD,EAAmB+B,OAAnB,CAJO,CAAD,CAAlB","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\n\nimport history from '~/services/history';\nimport api from '~/services/api';\n\nimport { signInSuccess, signFailure } from './actions';\n\nexport function* signIn({ payload }) {\n  try {\n    const { email, password } = payload;\n\n    const response = yield call(api.post, 'sessions', {\n      email,\n      password,\n    });\n\n    const { token, user } = response.data;\n\n    if (!user.provider) {\n      toast.error('Usuário não é prestador');\n      return;\n    }\n\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n\n    yield put(signInSuccess(token, user));\n    history.push('/dashboard');\n  } catch (err) {\n    toast.error('Falha na autenticação. Verifique seus dados.');\n    console.tron.error(err);\n    yield put(signFailure());\n  }\n}\n\nexport function* signUp({ payload }) {\n  const { name, email, password } = payload;\n\n  try {\n    yield call(api.post, 'users', {\n      name,\n      email,\n      password,\n      provider: true,\n    });\n\n    history.push('/');\n  } catch (err) {\n    toast.error('Falha no cadastro. Verifique seus dados.');\n\n    yield put(signFailure());\n  }\n}\n\nexport function setToken({ payload }) {\n  if (!payload) return;\n\n  const { token } = payload.auth;\n\n  if (token) {\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n}\n\nexport function signOut() {\n  history.push('/');\n}\n\nexport default all([\n  takeLatest('persist/REHYDRATE', setToken),\n  takeLatest('@auth/SIGN_IN_REQUEST', signIn),\n  takeLatest('@auth/SIGN_UP_REQUEST', signUp),\n  takeLatest('@auth/SIGN_OUT', signOut),\n]);\n"]},"metadata":{},"sourceType":"module"}